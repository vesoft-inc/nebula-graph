name: pull_request

on:
  pull_request:
    types: [synchronize, reopened, labeled]
    branches:
      - master
      - 'v[0-9]+.*'

defaults:
  run:
    shell: bash

jobs:
  lint:
    name: lint
    if: ${{ contains(github.event.pull_request.labels.*.name, 'ready-for-testing') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 2
      - name: Cpplint
        run: |
          ln -snf $PWD/.linters/cpp/hooks/pre-commit.sh $PWD/.linters/cpp/pre-commit.sh
          .linters/cpp/pre-commit.sh $(git --no-pager diff --diff-filter=d --name-only HEAD^ HEAD)

  build:
    name: build
    needs: lint
    runs-on: self-hosted
    strategy:
      fail-fast: false
      matrix:
        os:
          - centos7
          - ubuntu1804
        compiler:
          - gcc-9.2
          - clang-9
        exclude:
          - os: centos7
            compiler: clang-9
    container:
      image: vesoft/nebula-dev:${{ matrix.os }}
      env:
        TOOLSET_DIR: /opt/vesoft/toolset/clang/9.0.0
        CCACHE_DIR: /tmp/ccache/nebula-graph/${{ matrix.os }}-${{ matrix.compiler }}
        CCACHE_MAXSIZE: 1G
      volumes:
        - /tmp/ccache/nebula-graph/${{ matrix.os }}-${{ matrix.compiler }}:/tmp/ccache/nebula-graph/${{ matrix.os }}-${{ matrix.compiler }}
      options: --mount type=tmpfs,destination=/tmp/ccache/nebula-graph,tmpfs-size=1073741824 --cap-add=SYS_PTRACE
    steps:
      - uses: actions/checkout@v2
      - name: Checkout nebula-python
        uses: actions/checkout@v2
        with:
          repository: ${{ github.repository_owner }}/nebula-python
          ref: 'v2.0'
          path: modules/nebula-python
      - name: Prepare environment
        id: prepare
        env:
          PYPI_MIRROR: https://mirrors.aliyun.com/pypi/simple/
        run: |
          [ -d build/ ] && rm -rf build/* || mkdir -p build
          pip3 install --user -U setuptools -i $PYPI_MIRROR
          pip3 install --user -r tests/requirements.txt -i $PYPI_MIRROR
          cd modules/nebula-python
          python3 setup.py install --user
      - name: Checkout common
        uses: actions/checkout@v2
        with:
          repository: ${{ github.repository_owner }}/nebula-common
          path: modules/common
      - name: Checkout storage
        uses: actions/checkout@v2
        with:
          repository: ${{ github.repository_owner }}/nebula-storage
          path: modules/storage
      - name: CMake
        run: |
          case ${{ matrix.compiler }} in
          gcc-*)
            case ${{ matrix.os }} in
            centos7)
              # build with Release type
              cmake \
                  -DCMAKE_CXX_COMPILER=$TOOLSET_DIR/bin/g++ \
                  -DCMAKE_C_COMPILER=$TOOLSET_DIR/bin/gcc \
                  -DCMAKE_BUILD_TYPE=Release \
                  -DENABLE_TESTING=on \
                  -DENABLE_BUILD_STORAGE=on \
                  -B build
              ;;
            ubuntu1804)
              # build with Debug type
              cmake \
                  -DCMAKE_CXX_COMPILER=$TOOLSET_DIR/bin/g++ \
                  -DCMAKE_C_COMPILER=$TOOLSET_DIR/bin/gcc \
                  -DCMAKE_BUILD_TYPE=Debug \
                  -DENABLE_TESTING=on \
                  -DENABLE_BUILD_STORAGE=on \
                  -B build
              ;;
            esac
            ;;
          clang-*)
            # build with Sanitizer
            cmake \
                -DCMAKE_CXX_COMPILER=$TOOLSET_DIR/bin/clang++ \
                -DCMAKE_C_COMPILER=$TOOLSET_DIR/bin/clang \
                -DCMAKE_BUILD_TYPE=Debug \
                -DENABLE_ASAN=on \
                -DENABLE_TESTING=on \
                -DENABLE_BUILD_STORAGE=on \
                -B build
            ;;
          esac
      - name: Make graph
        run: cmake --build build/ -j $(nproc)
      - name: CTest
        env:
          ASAN_OPTIONS: fast_unwind_on_malloc=1
        run: ctest -j $(($(nproc)/2+1)) --timeout 400 --output-on-failure
        working-directory: build/
        timeout-minutes: 15
      - name: Pytest
        env:
          NEBULA_TEST_LOGS_DIR: ${{ github.workspace }}/build
        run: ./ci/test.sh test
        timeout-minutes: 25
      - name: Cleanup
        if: ${{ always() }}
        run: rm -rf build modules
